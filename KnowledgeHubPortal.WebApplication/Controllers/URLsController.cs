using KnowledgeHubPortal.WebApplication.Models.Data;
using KnowledgeHubPortal.WebApplication.Models.Domain;
using KnowledgeHubPortal.WebApplication.Models.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace KnowledgeHubPortal.WebApplication.Controllers
{
    public class URLsController : Controller
    {
        IKHPortalRepository repo = new KHPortalRepository();
        // GET: URLs
        public ActionResult Index()
        {
            var approvedUrls = repo.GetApprovedUrls();
            var categories = repo.GetCategories();
            var viewModel = new URLCategoryListViewModel { CategoryList = categories, URLList = approvedUrls };
            return View(viewModel);
        }
        public ActionResult SubmitURL()
        {
            List<Category> categories = repo.GetCategories();
            var viewModel = new URLCategoryViewModel { CategoryModel = categories, URLModel = new URL() };
            return View(viewModel);
        }
        [HttpPost]
        public ActionResult SubmitURL(URLCategoryViewModel viewModel)
        {
            if (!ModelState.IsValid)
            {
                // If model state is not valid, return the view with validation errors
                return View(viewModel);
            }

            viewModel.URLModel.DatePosted = DateTime.Now;

            viewModel.URLModel.TheCategory = repo.GetCategoryByID(viewModel.URLModel.CategoryID);
            viewModel.URLModel.IsApproved = false;
            repo.AddUrl(viewModel.URLModel);

            string msg = $"{viewModel.URLModel.UrlTitle} has been created successfully!!";
            TempData["Message"] = msg;
            return RedirectToAction("Index", "URLs");
        }
        public ActionResult Review()
        {
            var articlesToReview = repo.GetUrlsToReview();
            return View(articlesToReview);
        }
        public ActionResult Approve(int[] UrlIDs)
        {
            foreach (var uid in UrlIDs)
            {
                repo.ApproveUrlByID(uid);
            }
            TempData["Message"] = $"{UrlIDs.Length} articles have been approved!";

            INotificationMedium sendEmail = new NotificationEmail();
            sendEmail.Send("smrabbanister@gmail.com", "Article Accepted", "Congrats! Your Article on KHP has been approved!\nMail generated by ASP.NET MVC");

            return RedirectToAction("Review", "URLs");
        }
        public ActionResult Reject(int[] UrlIDs)
        {
            foreach (var uid in UrlIDs)
            {
                repo.DeleteUrlByID(uid);
            }
            TempData["Message"] = $"{UrlIDs.Length} articles have been rejected!";

            INotificationMedium sendEmail = new NotificationEmail();
            sendEmail.Send("smrabbanister@gmail.com", "Article Rejected", "Sorry, Your Article on KHP has been rejected...\nMail generated by ASP.NET MVC");

            return RedirectToAction("Review", "URLs");
        }
    }
}